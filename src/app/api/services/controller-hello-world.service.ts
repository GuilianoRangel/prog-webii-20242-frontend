/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { helloWorld } from '../fn/controller-hello-world/hello-world';
import { HelloWorld$Params } from '../fn/controller-hello-world/hello-world';
import { helloWorld1 } from '../fn/controller-hello-world/hello-world-1';
import { HelloWorld1$Params } from '../fn/controller-hello-world/hello-world-1';
import { helloWorldBody } from '../fn/controller-hello-world/hello-world-body';
import { HelloWorldBody$Params } from '../fn/controller-hello-world/hello-world-body';
import { helloWorldBody1 } from '../fn/controller-hello-world/hello-world-body-1';
import { HelloWorldBody1$Params } from '../fn/controller-hello-world/hello-world-body-1';

@Injectable({ providedIn: 'root' })
export class ControllerHelloWorldService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `helloWorld()` */
  static readonly HelloWorldPath = '/api/v1/aula01/{nome}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `helloWorld()` instead.
   *
   * This method doesn't expect any request body.
   */
  helloWorld$Response(params: HelloWorld$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return helloWorld(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `helloWorld$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  helloWorld(params: HelloWorld$Params, context?: HttpContext): Observable<string> {
    return this.helloWorld$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `helloWorldBody()` */
  static readonly HelloWorldBodyPath = '/api/v1/aula01/body';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `helloWorldBody()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  helloWorldBody$Response(params: HelloWorldBody$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return helloWorldBody(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `helloWorldBody$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  helloWorldBody(params: HelloWorldBody$Params, context?: HttpContext): Observable<string> {
    return this.helloWorldBody$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

  /** Path part for operation `helloWorldBody1()` */
  static readonly HelloWorldBody1Path = '/api/v1/aula01/body2';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `helloWorldBody1()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  helloWorldBody1$Response(params: HelloWorldBody1$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<string>>> {
    return helloWorldBody1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `helloWorldBody1$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  helloWorldBody1(params: HelloWorldBody1$Params, context?: HttpContext): Observable<Array<string>> {
    return this.helloWorldBody1$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<string>>): Array<string> => r.body)
    );
  }

  /** Path part for operation `helloWorld1()` */
  static readonly HelloWorld1Path = '/api/v1/aula01';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `helloWorld1()` instead.
   *
   * This method doesn't expect any request body.
   */
  helloWorld1$Response(params?: HelloWorld1$Params, context?: HttpContext): Observable<StrictHttpResponse<string>> {
    return helloWorld1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `helloWorld1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  helloWorld1(params?: HelloWorld1$Params, context?: HttpContext): Observable<string> {
    return this.helloWorld1$Response(params, context).pipe(
      map((r: StrictHttpResponse<string>): string => r.body)
    );
  }

}
