/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { PageSecurityUserDto } from '../models/page-security-user-dto';
import { securityUserControllerActivateUser } from '../fn/security-user-api/security-user-controller-activate-user';
import { SecurityUserControllerActivateUser$Params } from '../fn/security-user-api/security-user-controller-activate-user';
import { securityUserControllerCreate } from '../fn/security-user-api/security-user-controller-create';
import { SecurityUserControllerCreate$Params } from '../fn/security-user-api/security-user-controller-create';
import { securityUserControllerGetActiveUserByFilter } from '../fn/security-user-api/security-user-controller-get-active-user-by-filter';
import { SecurityUserControllerGetActiveUserByFilter$Params } from '../fn/security-user-api/security-user-controller-get-active-user-by-filter';
import { securityUserControllerGetById } from '../fn/security-user-api/security-user-controller-get-by-id';
import { SecurityUserControllerGetById$Params } from '../fn/security-user-api/security-user-controller-get-by-id';
import { securityUserControllerGetGroupReport } from '../fn/security-user-api/security-user-controller-get-group-report';
import { SecurityUserControllerGetGroupReport$Params } from '../fn/security-user-api/security-user-controller-get-group-report';
import { securityUserControllerGetGroupReport2 } from '../fn/security-user-api/security-user-controller-get-group-report-2';
import { SecurityUserControllerGetGroupReport2$Params } from '../fn/security-user-api/security-user-controller-get-group-report-2';
import { securityUserControllerGetUsersByFilter } from '../fn/security-user-api/security-user-controller-get-users-by-filter';
import { SecurityUserControllerGetUsersByFilter$Params } from '../fn/security-user-api/security-user-controller-get-users-by-filter';
import { securityUserControllerInactivateUser } from '../fn/security-user-api/security-user-controller-inactivate-user';
import { SecurityUserControllerInactivateUser$Params } from '../fn/security-user-api/security-user-controller-inactivate-user';
import { securityUserControllerInitializeAdminDataUser } from '../fn/security-user-api/security-user-controller-initialize-admin-data-user';
import { SecurityUserControllerInitializeAdminDataUser$Params } from '../fn/security-user-api/security-user-controller-initialize-admin-data-user';
import { securityUserControllerListAll } from '../fn/security-user-api/security-user-controller-list-all';
import { SecurityUserControllerListAll$Params } from '../fn/security-user-api/security-user-controller-list-all';
import { securityUserControllerListAllPage } from '../fn/security-user-api/security-user-controller-list-all-page';
import { SecurityUserControllerListAllPage$Params } from '../fn/security-user-api/security-user-controller-list-all-page';
import { securityUserControllerRemove } from '../fn/security-user-api/security-user-controller-remove';
import { SecurityUserControllerRemove$Params } from '../fn/security-user-api/security-user-controller-remove';
import { securityUserControllerUpdate } from '../fn/security-user-api/security-user-controller-update';
import { SecurityUserControllerUpdate$Params } from '../fn/security-user-api/security-user-controller-update';
import { securityUserControllerValidateLogin } from '../fn/security-user-api/security-user-controller-validate-login';
import { SecurityUserControllerValidateLogin$Params } from '../fn/security-user-api/security-user-controller-validate-login';
import { securityUserControllerValidateUserLogin } from '../fn/security-user-api/security-user-controller-validate-user-login';
import { SecurityUserControllerValidateUserLogin$Params } from '../fn/security-user-api/security-user-controller-validate-user-login';
import { SecurityUserDto } from '../models/security-user-dto';


/**
 * Manutenção de usuários do sistema
 */
@Injectable({ providedIn: 'root' })
export class SecurityUserApiService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `securityUserControllerGetById()` */
  static readonly SecurityUserControllerGetByIdPath = '/api/v1/user/{id}';

  /**
   * Obter os dados do Usuário pelo id informado!
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `securityUserControllerGetById()` instead.
   *
   * This method doesn't expect any request body.
   */
  securityUserControllerGetById$Response(params: SecurityUserControllerGetById$Params, context?: HttpContext): Observable<StrictHttpResponse<SecurityUserDto>> {
    return securityUserControllerGetById(this.http, this.rootUrl, params, context);
  }

  /**
   * Obter os dados do Usuário pelo id informado!
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `securityUserControllerGetById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  securityUserControllerGetById(params: SecurityUserControllerGetById$Params, context?: HttpContext): Observable<SecurityUserDto> {
    return this.securityUserControllerGetById$Response(params, context).pipe(
      map((r: StrictHttpResponse<SecurityUserDto>): SecurityUserDto => r.body)
    );
  }

  /** Path part for operation `securityUserControllerUpdate()` */
  static readonly SecurityUserControllerUpdatePath = '/api/v1/user/{id}';

  /**
   * Método utilizado para altlerar os dados de uma entidiade
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `securityUserControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  securityUserControllerUpdate$Response(params: SecurityUserControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<SecurityUserDto>> {
    return securityUserControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * Método utilizado para altlerar os dados de uma entidiade
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `securityUserControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  securityUserControllerUpdate(params: SecurityUserControllerUpdate$Params, context?: HttpContext): Observable<SecurityUserDto> {
    return this.securityUserControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<SecurityUserDto>): SecurityUserDto => r.body)
    );
  }

  /** Path part for operation `securityUserControllerRemove()` */
  static readonly SecurityUserControllerRemovePath = '/api/v1/user/{id}';

  /**
   * Método utilizado para remover uma entidiade pela id informado
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `securityUserControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  securityUserControllerRemove$Response(params: SecurityUserControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<SecurityUserDto>> {
    return securityUserControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * Método utilizado para remover uma entidiade pela id informado
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `securityUserControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  securityUserControllerRemove(params: SecurityUserControllerRemove$Params, context?: HttpContext): Observable<SecurityUserDto> {
    return this.securityUserControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<SecurityUserDto>): SecurityUserDto => r.body)
    );
  }

  /** Path part for operation `securityUserControllerInactivateUser()` */
  static readonly SecurityUserControllerInactivateUserPath = '/api/v1/user/{id}/inactivate';

  /**
   * Inativa o usuario.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `securityUserControllerInactivateUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  securityUserControllerInactivateUser$Response(params: SecurityUserControllerInactivateUser$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return securityUserControllerInactivateUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Inativa o usuario.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `securityUserControllerInactivateUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  securityUserControllerInactivateUser(params: SecurityUserControllerInactivateUser$Params, context?: HttpContext): Observable<any> {
    return this.securityUserControllerInactivateUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `securityUserControllerActivateUser()` */
  static readonly SecurityUserControllerActivateUserPath = '/api/v1/user/{id}/activate';

  /**
   * Ativa o usuário.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `securityUserControllerActivateUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  securityUserControllerActivateUser$Response(params: SecurityUserControllerActivateUser$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return securityUserControllerActivateUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Ativa o usuário.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `securityUserControllerActivateUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  securityUserControllerActivateUser(params: SecurityUserControllerActivateUser$Params, context?: HttpContext): Observable<any> {
    return this.securityUserControllerActivateUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `securityUserControllerListAll()` */
  static readonly SecurityUserControllerListAllPath = '/api/v1/user';

  /**
   * lista todos modelos
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `securityUserControllerListAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  securityUserControllerListAll$Response(params?: SecurityUserControllerListAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<SecurityUserDto>>> {
    return securityUserControllerListAll(this.http, this.rootUrl, params, context);
  }

  /**
   * lista todos modelos
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `securityUserControllerListAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  securityUserControllerListAll(params?: SecurityUserControllerListAll$Params, context?: HttpContext): Observable<Array<SecurityUserDto>> {
    return this.securityUserControllerListAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<SecurityUserDto>>): Array<SecurityUserDto> => r.body)
    );
  }

  /** Path part for operation `securityUserControllerCreate()` */
  static readonly SecurityUserControllerCreatePath = '/api/v1/user';

  /**
   * Método utilizado para realizar a inclusão de um entidade
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `securityUserControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  securityUserControllerCreate$Response(params: SecurityUserControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<SecurityUserDto>> {
    return securityUserControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * Método utilizado para realizar a inclusão de um entidade
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `securityUserControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  securityUserControllerCreate(params: SecurityUserControllerCreate$Params, context?: HttpContext): Observable<SecurityUserDto> {
    return this.securityUserControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<SecurityUserDto>): SecurityUserDto => r.body)
    );
  }

  /** Path part for operation `securityUserControllerValidateUserLogin()` */
  static readonly SecurityUserControllerValidateUserLoginPath = '/api/v1/user/{id}/login/validate/{login}';

  /**
   * Verifica se o Login informado é válido e se está em uso.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `securityUserControllerValidateUserLogin()` instead.
   *
   * This method doesn't expect any request body.
   */
  securityUserControllerValidateUserLogin$Response(params: SecurityUserControllerValidateUserLogin$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return securityUserControllerValidateUserLogin(this.http, this.rootUrl, params, context);
  }

  /**
   * Verifica se o Login informado é válido e se está em uso.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `securityUserControllerValidateUserLogin$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  securityUserControllerValidateUserLogin(params: SecurityUserControllerValidateUserLogin$Params, context?: HttpContext): Observable<any> {
    return this.securityUserControllerValidateUserLogin$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `securityUserControllerGetGroupReport2()` */
  static readonly SecurityUserControllerGetGroupReport2Path = '/api/v1/user/users-report';

  /**
   * Retorna Relatório de Grupos.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `securityUserControllerGetGroupReport2()` instead.
   *
   * This method doesn't expect any request body.
   */
  securityUserControllerGetGroupReport2$Response(params?: SecurityUserControllerGetGroupReport2$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return securityUserControllerGetGroupReport2(this.http, this.rootUrl, params, context);
  }

  /**
   * Retorna Relatório de Grupos.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `securityUserControllerGetGroupReport2$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  securityUserControllerGetGroupReport2(params?: SecurityUserControllerGetGroupReport2$Params, context?: HttpContext): Observable<any> {
    return this.securityUserControllerGetGroupReport2$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `securityUserControllerGetGroupReport()` */
  static readonly SecurityUserControllerGetGroupReportPath = '/api/v1/user/users-report/{idGrupo}';

  /**
   * Retorna Relatório de Usuários.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `securityUserControllerGetGroupReport()` instead.
   *
   * This method doesn't expect any request body.
   */
  securityUserControllerGetGroupReport$Response(params: SecurityUserControllerGetGroupReport$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return securityUserControllerGetGroupReport(this.http, this.rootUrl, params, context);
  }

  /**
   * Retorna Relatório de Usuários.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `securityUserControllerGetGroupReport$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  securityUserControllerGetGroupReport(params: SecurityUserControllerGetGroupReport$Params, context?: HttpContext): Observable<any> {
    return this.securityUserControllerGetGroupReport$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `securityUserControllerListAllPage()` */
  static readonly SecurityUserControllerListAllPagePath = '/api/v1/user/page';

  /**
   * lista todos modelos paginada
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `securityUserControllerListAllPage()` instead.
   *
   * This method doesn't expect any request body.
   */
  securityUserControllerListAllPage$Response(params: SecurityUserControllerListAllPage$Params, context?: HttpContext): Observable<StrictHttpResponse<PageSecurityUserDto>> {
    return securityUserControllerListAllPage(this.http, this.rootUrl, params, context);
  }

  /**
   * lista todos modelos paginada
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `securityUserControllerListAllPage$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  securityUserControllerListAllPage(params: SecurityUserControllerListAllPage$Params, context?: HttpContext): Observable<PageSecurityUserDto> {
    return this.securityUserControllerListAllPage$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageSecurityUserDto>): PageSecurityUserDto => r.body)
    );
  }

  /** Path part for operation `securityUserControllerValidateLogin()` */
  static readonly SecurityUserControllerValidateLoginPath = '/api/v1/user/login/validate/{login}';

  /**
   * Verifica se o Login informado é válido e se está em uso.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `securityUserControllerValidateLogin()` instead.
   *
   * This method doesn't expect any request body.
   */
  securityUserControllerValidateLogin$Response(params: SecurityUserControllerValidateLogin$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return securityUserControllerValidateLogin(this.http, this.rootUrl, params, context);
  }

  /**
   * Verifica se o Login informado é válido e se está em uso.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `securityUserControllerValidateLogin$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  securityUserControllerValidateLogin(params: SecurityUserControllerValidateLogin$Params, context?: HttpContext): Observable<any> {
    return this.securityUserControllerValidateLogin$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `securityUserControllerInitializeAdminDataUser()` */
  static readonly SecurityUserControllerInitializeAdminDataUserPath = '/api/v1/user/initialize-admin-user/{password}';

  /**
   * Carregar dados iniciais - sistema admin Module
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `securityUserControllerInitializeAdminDataUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  securityUserControllerInitializeAdminDataUser$Response(params: SecurityUserControllerInitializeAdminDataUser$Params, context?: HttpContext): Observable<StrictHttpResponse<any>> {
    return securityUserControllerInitializeAdminDataUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Carregar dados iniciais - sistema admin Module
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `securityUserControllerInitializeAdminDataUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  securityUserControllerInitializeAdminDataUser(params: SecurityUserControllerInitializeAdminDataUser$Params, context?: HttpContext): Observable<any> {
    return this.securityUserControllerInitializeAdminDataUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<any>): any => r.body)
    );
  }

  /** Path part for operation `securityUserControllerGetUsersByFilter()` */
  static readonly SecurityUserControllerGetUsersByFilterPath = '/api/v1/user/filter';

  /**
   * Recupera os usuarios pelo Filtro Informado.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `securityUserControllerGetUsersByFilter()` instead.
   *
   * This method doesn't expect any request body.
   */
  securityUserControllerGetUsersByFilter$Response(params: SecurityUserControllerGetUsersByFilter$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<SecurityUserDto>>> {
    return securityUserControllerGetUsersByFilter(this.http, this.rootUrl, params, context);
  }

  /**
   * Recupera os usuarios pelo Filtro Informado.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `securityUserControllerGetUsersByFilter$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  securityUserControllerGetUsersByFilter(params: SecurityUserControllerGetUsersByFilter$Params, context?: HttpContext): Observable<Array<SecurityUserDto>> {
    return this.securityUserControllerGetUsersByFilter$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<SecurityUserDto>>): Array<SecurityUserDto> => r.body)
    );
  }

  /** Path part for operation `securityUserControllerGetActiveUserByFilter()` */
  static readonly SecurityUserControllerGetActiveUserByFilterPath = '/api/v1/user/filter-actives';

  /**
   * Recupera os usuarios pelo Filtro Informado de usuários ativos.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `securityUserControllerGetActiveUserByFilter()` instead.
   *
   * This method doesn't expect any request body.
   */
  securityUserControllerGetActiveUserByFilter$Response(params: SecurityUserControllerGetActiveUserByFilter$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<SecurityUserDto>>> {
    return securityUserControllerGetActiveUserByFilter(this.http, this.rootUrl, params, context);
  }

  /**
   * Recupera os usuarios pelo Filtro Informado de usuários ativos.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `securityUserControllerGetActiveUserByFilter$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  securityUserControllerGetActiveUserByFilter(params: SecurityUserControllerGetActiveUserByFilter$Params, context?: HttpContext): Observable<Array<SecurityUserDto>> {
    return this.securityUserControllerGetActiveUserByFilter$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<SecurityUserDto>>): Array<SecurityUserDto> => r.body)
    );
  }

}
