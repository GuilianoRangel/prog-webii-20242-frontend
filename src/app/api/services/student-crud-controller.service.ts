/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { Student } from '../models/student';
import { studentCrudControllerCreate } from '../fn/student-crud-controller/student-crud-controller-create';
import { StudentCrudControllerCreate$Params } from '../fn/student-crud-controller/student-crud-controller-create';
import { studentCrudControllerGetById } from '../fn/student-crud-controller/student-crud-controller-get-by-id';
import { StudentCrudControllerGetById$Params } from '../fn/student-crud-controller/student-crud-controller-get-by-id';
import { studentCrudControllerListAll } from '../fn/student-crud-controller/student-crud-controller-list-all';
import { StudentCrudControllerListAll$Params } from '../fn/student-crud-controller/student-crud-controller-list-all';
import { studentCrudControllerListYesterdayRegisters } from '../fn/student-crud-controller/student-crud-controller-list-yesterday-registers';
import { StudentCrudControllerListYesterdayRegisters$Params } from '../fn/student-crud-controller/student-crud-controller-list-yesterday-registers';
import { studentCrudControllerRemove } from '../fn/student-crud-controller/student-crud-controller-remove';
import { StudentCrudControllerRemove$Params } from '../fn/student-crud-controller/student-crud-controller-remove';
import { studentCrudControllerUpdate } from '../fn/student-crud-controller/student-crud-controller-update';
import { StudentCrudControllerUpdate$Params } from '../fn/student-crud-controller/student-crud-controller-update';
import { StudentDto } from '../models/student-dto';
import { StudentListDto } from '../models/student-list-dto';

@Injectable({ providedIn: 'root' })
export class StudentCrudControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `studentCrudControllerGetById()` */
  static readonly StudentCrudControllerGetByIdPath = '/api/v1/crud-student/{id}';

  /**
   * Obter os dados completos de uma entidiade pelo id informado!
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `studentCrudControllerGetById()` instead.
   *
   * This method doesn't expect any request body.
   */
  studentCrudControllerGetById$Response(params: StudentCrudControllerGetById$Params, context?: HttpContext): Observable<StrictHttpResponse<StudentDto>> {
    return studentCrudControllerGetById(this.http, this.rootUrl, params, context);
  }

  /**
   * Obter os dados completos de uma entidiade pelo id informado!
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `studentCrudControllerGetById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  studentCrudControllerGetById(params: StudentCrudControllerGetById$Params, context?: HttpContext): Observable<StudentDto> {
    return this.studentCrudControllerGetById$Response(params, context).pipe(
      map((r: StrictHttpResponse<StudentDto>): StudentDto => r.body)
    );
  }

  /** Path part for operation `studentCrudControllerUpdate()` */
  static readonly StudentCrudControllerUpdatePath = '/api/v1/crud-student/{id}';

  /**
   * Método utilizado para altlerar os dados de uma entidiade
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `studentCrudControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  studentCrudControllerUpdate$Response(params: StudentCrudControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<StudentDto>> {
    return studentCrudControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * Método utilizado para altlerar os dados de uma entidiade
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `studentCrudControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  studentCrudControllerUpdate(params: StudentCrudControllerUpdate$Params, context?: HttpContext): Observable<StudentDto> {
    return this.studentCrudControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<StudentDto>): StudentDto => r.body)
    );
  }

  /** Path part for operation `studentCrudControllerRemove()` */
  static readonly StudentCrudControllerRemovePath = '/api/v1/crud-student/{id}';

  /**
   * Método utilizado para remover uma entidiade pela id informado
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `studentCrudControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  studentCrudControllerRemove$Response(params: StudentCrudControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<StudentDto>> {
    return studentCrudControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * Método utilizado para remover uma entidiade pela id informado
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `studentCrudControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  studentCrudControllerRemove(params: StudentCrudControllerRemove$Params, context?: HttpContext): Observable<StudentDto> {
    return this.studentCrudControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<StudentDto>): StudentDto => r.body)
    );
  }

  /** Path part for operation `studentCrudControllerListAll()` */
  static readonly StudentCrudControllerListAllPath = '/api/v1/crud-student';

  /**
   * lista todos modelos
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `studentCrudControllerListAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  studentCrudControllerListAll$Response(params?: StudentCrudControllerListAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<StudentListDto>>> {
    return studentCrudControllerListAll(this.http, this.rootUrl, params, context);
  }

  /**
   * lista todos modelos
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `studentCrudControllerListAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  studentCrudControllerListAll(params?: StudentCrudControllerListAll$Params, context?: HttpContext): Observable<Array<StudentListDto>> {
    return this.studentCrudControllerListAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<StudentListDto>>): Array<StudentListDto> => r.body)
    );
  }

  /** Path part for operation `studentCrudControllerCreate()` */
  static readonly StudentCrudControllerCreatePath = '/api/v1/crud-student';

  /**
   * Método utilizado para realizar a inclusão de um entidade
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `studentCrudControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  studentCrudControllerCreate$Response(params: StudentCrudControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<StudentDto>> {
    return studentCrudControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * Método utilizado para realizar a inclusão de um entidade
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `studentCrudControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  studentCrudControllerCreate(params: StudentCrudControllerCreate$Params, context?: HttpContext): Observable<StudentDto> {
    return this.studentCrudControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<StudentDto>): StudentDto => r.body)
    );
  }

  /** Path part for operation `studentCrudControllerListYesterdayRegisters()` */
  static readonly StudentCrudControllerListYesterdayRegistersPath = '/api/v1/crud-student/yesterday-registers';

  /**
   * lista todos os estudantes matriculados antes de hoje
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `studentCrudControllerListYesterdayRegisters()` instead.
   *
   * This method doesn't expect any request body.
   */
  studentCrudControllerListYesterdayRegisters$Response(params?: StudentCrudControllerListYesterdayRegisters$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Student>>> {
    return studentCrudControllerListYesterdayRegisters(this.http, this.rootUrl, params, context);
  }

  /**
   * lista todos os estudantes matriculados antes de hoje
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `studentCrudControllerListYesterdayRegisters$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  studentCrudControllerListYesterdayRegisters(params?: StudentCrudControllerListYesterdayRegisters$Params, context?: HttpContext): Observable<Array<Student>> {
    return this.studentCrudControllerListYesterdayRegisters$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Student>>): Array<Student> => r.body)
    );
  }

}
