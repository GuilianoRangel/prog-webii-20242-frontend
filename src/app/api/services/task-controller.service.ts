/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { PageTaskDto } from '../models/page-task-dto';
import { SearchField } from '../models/search-field';
import { taskControllerCompleted } from '../fn/task-controller/task-controller-completed';
import { TaskControllerCompleted$Params } from '../fn/task-controller/task-controller-completed';
import { taskControllerCreate } from '../fn/task-controller/task-controller-create';
import { TaskControllerCreate$Params } from '../fn/task-controller/task-controller-create';
import { taskControllerGetById } from '../fn/task-controller/task-controller-get-by-id';
import { TaskControllerGetById$Params } from '../fn/task-controller/task-controller-get-by-id';
import { taskControllerListAll } from '../fn/task-controller/task-controller-list-all';
import { TaskControllerListAll$Params } from '../fn/task-controller/task-controller-list-all';
import { taskControllerListAllPage } from '../fn/task-controller/task-controller-list-all-page';
import { TaskControllerListAllPage$Params } from '../fn/task-controller/task-controller-list-all-page';
import { taskControllerListIncomplete } from '../fn/task-controller/task-controller-list-incomplete';
import { TaskControllerListIncomplete$Params } from '../fn/task-controller/task-controller-list-incomplete';
import { taskControllerListIncompletePage } from '../fn/task-controller/task-controller-list-incomplete-page';
import { TaskControllerListIncompletePage$Params } from '../fn/task-controller/task-controller-list-incomplete-page';
import { taskControllerRemove } from '../fn/task-controller/task-controller-remove';
import { TaskControllerRemove$Params } from '../fn/task-controller/task-controller-remove';
import { taskControllerSearchFieldsAction } from '../fn/task-controller/task-controller-search-fields-action';
import { TaskControllerSearchFieldsAction$Params } from '../fn/task-controller/task-controller-search-fields-action';
import { taskControllerSearchFieldsActionPage } from '../fn/task-controller/task-controller-search-fields-action-page';
import { TaskControllerSearchFieldsActionPage$Params } from '../fn/task-controller/task-controller-search-fields-action-page';
import { taskControllerSearchFieldsList } from '../fn/task-controller/task-controller-search-fields-list';
import { TaskControllerSearchFieldsList$Params } from '../fn/task-controller/task-controller-search-fields-list';
import { taskControllerUpdate } from '../fn/task-controller/task-controller-update';
import { TaskControllerUpdate$Params } from '../fn/task-controller/task-controller-update';
import { TaskDto } from '../models/task-dto';

@Injectable({ providedIn: 'root' })
export class TaskControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `taskControllerGetById()` */
  static readonly TaskControllerGetByIdPath = '/api/v1/task/{id}';

  /**
   * Obter os dados completos de uma entidiade pelo id informado!
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `taskControllerGetById()` instead.
   *
   * This method doesn't expect any request body.
   */
  taskControllerGetById$Response(params: TaskControllerGetById$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskDto>> {
    return taskControllerGetById(this.http, this.rootUrl, params, context);
  }

  /**
   * Obter os dados completos de uma entidiade pelo id informado!
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `taskControllerGetById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  taskControllerGetById(params: TaskControllerGetById$Params, context?: HttpContext): Observable<TaskDto> {
    return this.taskControllerGetById$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskDto>): TaskDto => r.body)
    );
  }

  /** Path part for operation `taskControllerUpdate()` */
  static readonly TaskControllerUpdatePath = '/api/v1/task/{id}';

  /**
   * Método utilizado para altlerar os dados de uma entidiade
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `taskControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  taskControllerUpdate$Response(params: TaskControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskDto>> {
    return taskControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * Método utilizado para altlerar os dados de uma entidiade
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `taskControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  taskControllerUpdate(params: TaskControllerUpdate$Params, context?: HttpContext): Observable<TaskDto> {
    return this.taskControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskDto>): TaskDto => r.body)
    );
  }

  /** Path part for operation `taskControllerRemove()` */
  static readonly TaskControllerRemovePath = '/api/v1/task/{id}';

  /**
   * Método utilizado para remover uma entidiade pela id informado
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `taskControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  taskControllerRemove$Response(params: TaskControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskDto>> {
    return taskControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * Método utilizado para remover uma entidiade pela id informado
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `taskControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  taskControllerRemove(params: TaskControllerRemove$Params, context?: HttpContext): Observable<TaskDto> {
    return this.taskControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskDto>): TaskDto => r.body)
    );
  }

  /** Path part for operation `taskControllerListAll()` */
  static readonly TaskControllerListAllPath = '/api/v1/task';

  /**
   * lista todos modelos
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `taskControllerListAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  taskControllerListAll$Response(params?: TaskControllerListAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TaskDto>>> {
    return taskControllerListAll(this.http, this.rootUrl, params, context);
  }

  /**
   * lista todos modelos
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `taskControllerListAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  taskControllerListAll(params?: TaskControllerListAll$Params, context?: HttpContext): Observable<Array<TaskDto>> {
    return this.taskControllerListAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TaskDto>>): Array<TaskDto> => r.body)
    );
  }

  /** Path part for operation `taskControllerCreate()` */
  static readonly TaskControllerCreatePath = '/api/v1/task';

  /**
   * Método utilizado para realizar a inclusão de um entidade
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `taskControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  taskControllerCreate$Response(params: TaskControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskDto>> {
    return taskControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * Método utilizado para realizar a inclusão de um entidade
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `taskControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  taskControllerCreate(params: TaskControllerCreate$Params, context?: HttpContext): Observable<TaskDto> {
    return this.taskControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskDto>): TaskDto => r.body)
    );
  }

  /** Path part for operation `taskControllerSearchFieldsList()` */
  static readonly TaskControllerSearchFieldsListPath = '/api/v1/task/search-fields';

  /**
   * Listagem dos campos de busca
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `taskControllerSearchFieldsList()` instead.
   *
   * This method doesn't expect any request body.
   */
  taskControllerSearchFieldsList$Response(params?: TaskControllerSearchFieldsList$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<SearchField>>> {
    return taskControllerSearchFieldsList(this.http, this.rootUrl, params, context);
  }

  /**
   * Listagem dos campos de busca
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `taskControllerSearchFieldsList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  taskControllerSearchFieldsList(params?: TaskControllerSearchFieldsList$Params, context?: HttpContext): Observable<Array<SearchField>> {
    return this.taskControllerSearchFieldsList$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<SearchField>>): Array<SearchField> => r.body)
    );
  }

  /** Path part for operation `taskControllerSearchFieldsAction()` */
  static readonly TaskControllerSearchFieldsActionPath = '/api/v1/task/search-fields';

  /**
   * Realiza a busca pelos valores dos campos informados
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `taskControllerSearchFieldsAction()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  taskControllerSearchFieldsAction$Response(params: TaskControllerSearchFieldsAction$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TaskDto>>> {
    return taskControllerSearchFieldsAction(this.http, this.rootUrl, params, context);
  }

  /**
   * Realiza a busca pelos valores dos campos informados
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `taskControllerSearchFieldsAction$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  taskControllerSearchFieldsAction(params: TaskControllerSearchFieldsAction$Params, context?: HttpContext): Observable<Array<TaskDto>> {
    return this.taskControllerSearchFieldsAction$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TaskDto>>): Array<TaskDto> => r.body)
    );
  }

  /** Path part for operation `taskControllerSearchFieldsActionPage()` */
  static readonly TaskControllerSearchFieldsActionPagePath = '/api/v1/task/search-fields/page';

  /**
   * Realiza a busca pelos valores dos campos informados
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `taskControllerSearchFieldsActionPage()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  taskControllerSearchFieldsActionPage$Response(params: TaskControllerSearchFieldsActionPage$Params, context?: HttpContext): Observable<StrictHttpResponse<PageTaskDto>> {
    return taskControllerSearchFieldsActionPage(this.http, this.rootUrl, params, context);
  }

  /**
   * Realiza a busca pelos valores dos campos informados
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `taskControllerSearchFieldsActionPage$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  taskControllerSearchFieldsActionPage(params: TaskControllerSearchFieldsActionPage$Params, context?: HttpContext): Observable<PageTaskDto> {
    return this.taskControllerSearchFieldsActionPage$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageTaskDto>): PageTaskDto => r.body)
    );
  }

  /** Path part for operation `taskControllerCompleted()` */
  static readonly TaskControllerCompletedPath = '/api/v1/task/complete/{id}';

  /**
   * End point para completar a tarefa
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `taskControllerCompleted()` instead.
   *
   * This method doesn't expect any request body.
   */
  taskControllerCompleted$Response(params: TaskControllerCompleted$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return taskControllerCompleted(this.http, this.rootUrl, params, context);
  }

  /**
   * End point para completar a tarefa
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `taskControllerCompleted$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  taskControllerCompleted(params: TaskControllerCompleted$Params, context?: HttpContext): Observable<{
}> {
    return this.taskControllerCompleted$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `taskControllerListAllPage()` */
  static readonly TaskControllerListAllPagePath = '/api/v1/task/page';

  /**
   * lista todos modelos paginada
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `taskControllerListAllPage()` instead.
   *
   * This method doesn't expect any request body.
   */
  taskControllerListAllPage$Response(params: TaskControllerListAllPage$Params, context?: HttpContext): Observable<StrictHttpResponse<PageTaskDto>> {
    return taskControllerListAllPage(this.http, this.rootUrl, params, context);
  }

  /**
   * lista todos modelos paginada
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `taskControllerListAllPage$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  taskControllerListAllPage(params: TaskControllerListAllPage$Params, context?: HttpContext): Observable<PageTaskDto> {
    return this.taskControllerListAllPage$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageTaskDto>): PageTaskDto => r.body)
    );
  }

  /** Path part for operation `taskControllerListIncomplete()` */
  static readonly TaskControllerListIncompletePath = '/api/v1/task/incomplete';

  /**
   * lista tarefas incompletas
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `taskControllerListIncomplete()` instead.
   *
   * This method doesn't expect any request body.
   */
  taskControllerListIncomplete$Response(params?: TaskControllerListIncomplete$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TaskDto>>> {
    return taskControllerListIncomplete(this.http, this.rootUrl, params, context);
  }

  /**
   * lista tarefas incompletas
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `taskControllerListIncomplete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  taskControllerListIncomplete(params?: TaskControllerListIncomplete$Params, context?: HttpContext): Observable<Array<TaskDto>> {
    return this.taskControllerListIncomplete$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TaskDto>>): Array<TaskDto> => r.body)
    );
  }

  /** Path part for operation `taskControllerListIncompletePage()` */
  static readonly TaskControllerListIncompletePagePath = '/api/v1/task/incomplete/page';

  /**
   * lista tarefas incompletas
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `taskControllerListIncompletePage()` instead.
   *
   * This method doesn't expect any request body.
   */
  taskControllerListIncompletePage$Response(params: TaskControllerListIncompletePage$Params, context?: HttpContext): Observable<StrictHttpResponse<PageTaskDto>> {
    return taskControllerListIncompletePage(this.http, this.rootUrl, params, context);
  }

  /**
   * lista tarefas incompletas
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `taskControllerListIncompletePage$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  taskControllerListIncompletePage(params: TaskControllerListIncompletePage$Params, context?: HttpContext): Observable<PageTaskDto> {
    return this.taskControllerListIncompletePage$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageTaskDto>): PageTaskDto => r.body)
    );
  }

}
