/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { taskControllerComplated } from '../fn/task-controller/task-controller-complated';
import { TaskControllerComplated$Params } from '../fn/task-controller/task-controller-complated';
import { taskControllerCreate } from '../fn/task-controller/task-controller-create';
import { TaskControllerCreate$Params } from '../fn/task-controller/task-controller-create';
import { taskControllerGetById } from '../fn/task-controller/task-controller-get-by-id';
import { TaskControllerGetById$Params } from '../fn/task-controller/task-controller-get-by-id';
import { taskControllerListAll } from '../fn/task-controller/task-controller-list-all';
import { TaskControllerListAll$Params } from '../fn/task-controller/task-controller-list-all';
import { taskControllerRemove } from '../fn/task-controller/task-controller-remove';
import { TaskControllerRemove$Params } from '../fn/task-controller/task-controller-remove';
import { taskControllerUpdate } from '../fn/task-controller/task-controller-update';
import { TaskControllerUpdate$Params } from '../fn/task-controller/task-controller-update';
import { TaskDto } from '../models/task-dto';

@Injectable({ providedIn: 'root' })
export class TaskControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `taskControllerGetById()` */
  static readonly TaskControllerGetByIdPath = '/api/v1/task/{id}';

  /**
   * Obter os dados completos de uma entidiade pelo id informado!
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `taskControllerGetById()` instead.
   *
   * This method doesn't expect any request body.
   */
  taskControllerGetById$Response(params: TaskControllerGetById$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskDto>> {
    return taskControllerGetById(this.http, this.rootUrl, params, context);
  }

  /**
   * Obter os dados completos de uma entidiade pelo id informado!
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `taskControllerGetById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  taskControllerGetById(params: TaskControllerGetById$Params, context?: HttpContext): Observable<TaskDto> {
    return this.taskControllerGetById$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskDto>): TaskDto => r.body)
    );
  }

  /** Path part for operation `taskControllerUpdate()` */
  static readonly TaskControllerUpdatePath = '/api/v1/task/{id}';

  /**
   * Método utilizado para altlerar os dados de uma entidiade
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `taskControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  taskControllerUpdate$Response(params: TaskControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskDto>> {
    return taskControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * Método utilizado para altlerar os dados de uma entidiade
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `taskControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  taskControllerUpdate(params: TaskControllerUpdate$Params, context?: HttpContext): Observable<TaskDto> {
    return this.taskControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskDto>): TaskDto => r.body)
    );
  }

  /** Path part for operation `taskControllerRemove()` */
  static readonly TaskControllerRemovePath = '/api/v1/task/{id}';

  /**
   * Método utilizado para remover uma entidiade pela id informado
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `taskControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  taskControllerRemove$Response(params: TaskControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskDto>> {
    return taskControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * Método utilizado para remover uma entidiade pela id informado
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `taskControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  taskControllerRemove(params: TaskControllerRemove$Params, context?: HttpContext): Observable<TaskDto> {
    return this.taskControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskDto>): TaskDto => r.body)
    );
  }

  /** Path part for operation `taskControllerListAll()` */
  static readonly TaskControllerListAllPath = '/api/v1/task';

  /**
   * lista todos modelos
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `taskControllerListAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  taskControllerListAll$Response(params?: TaskControllerListAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TaskDto>>> {
    return taskControllerListAll(this.http, this.rootUrl, params, context);
  }

  /**
   * lista todos modelos
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `taskControllerListAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  taskControllerListAll(params?: TaskControllerListAll$Params, context?: HttpContext): Observable<Array<TaskDto>> {
    return this.taskControllerListAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TaskDto>>): Array<TaskDto> => r.body)
    );
  }

  /** Path part for operation `taskControllerCreate()` */
  static readonly TaskControllerCreatePath = '/api/v1/task';

  /**
   * Método utilizado para realizar a inclusão de um entidade
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `taskControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  taskControllerCreate$Response(params: TaskControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<TaskDto>> {
    return taskControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * Método utilizado para realizar a inclusão de um entidade
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `taskControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  taskControllerCreate(params: TaskControllerCreate$Params, context?: HttpContext): Observable<TaskDto> {
    return this.taskControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<TaskDto>): TaskDto => r.body)
    );
  }

  /** Path part for operation `taskControllerComplated()` */
  static readonly TaskControllerComplatedPath = '/api/v1/task/complete/{id}';

  /**
   * End point para completar a tarefa
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `taskControllerComplated()` instead.
   *
   * This method doesn't expect any request body.
   */
  taskControllerComplated$Response(params: TaskControllerComplated$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return taskControllerComplated(this.http, this.rootUrl, params, context);
  }

  /**
   * End point para completar a tarefa
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `taskControllerComplated$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  taskControllerComplated(params: TaskControllerComplated$Params, context?: HttpContext): Observable<{
}> {
    return this.taskControllerComplated$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
